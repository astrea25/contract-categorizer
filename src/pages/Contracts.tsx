
import { useState, useMemo } from 'react';
import { PlusCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Navbar from '@/components/layout/Navbar';
import FilterBar from '@/components/contracts/FilterBar';
import ContractCard from '@/components/contracts/ContractCard';
import ContractForm from '@/components/contracts/ContractForm';
import { Contract, ContractStatus, ContractType, contracts, filterByProject, filterByStatus, filterByType } from '@/lib/data';
import { useToast } from '@/components/ui/use-toast';
import PageTransition from '@/components/layout/PageTransition';

const Contracts = () => {
  const { toast } = useToast();
  const [contractsList, setContractsList] = useState<Contract[]>(contracts);
  const [filters, setFilters] = useState({
    search: '',
    status: 'all' as ContractStatus | 'all',
    type: 'all' as ContractType | 'all',
    project: '',
  });

  const handleFilterChange = (newFilters: typeof filters) => {
    setFilters(newFilters);
  };

  const handleSaveContract = (newContract: Partial<Contract>) => {
    // In a real application, you would save this to a database
    // Here we're just updating our local state for demonstration
    const now = new Date().toISOString();
    
    const contractToAdd: Contract = {
      id: `temp-${Date.now()}`, // In a real app, this would be generated by the backend
      title: newContract.title || 'Untitled Contract',
      projectName: newContract.projectName || 'Unassigned',
      type: newContract.type || 'service',
      status: newContract.status || 'draft',
      parties: newContract.parties || [],
      startDate: newContract.startDate || now.split('T')[0],
      endDate: newContract.endDate || null,
      value: newContract.value || null,
      description: newContract.description || '',
      createdAt: now,
      updatedAt: now,
    };
    
    setContractsList([contractToAdd, ...contractsList]);
    toast({
      title: 'Contract created',
      description: 'Your new contract has been created successfully.',
    });
  };

  const filteredContracts = useMemo(() => {
    let result = [...contractsList];
    
    // Filter by status
    result = filterByStatus(result, filters.status);
    
    // Filter by type
    result = filterByType(result, filters.type);
    
    // Filter by project
    result = filterByProject(result, filters.project);
    
    // Filter by search term (title or description)
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      result = result.filter(
        contract =>
          contract.title.toLowerCase().includes(searchLower) ||
          contract.description.toLowerCase().includes(searchLower)
      );
    }
    
    return result;
  }, [contractsList, filters]);

  return (
    <PageTransition>
      <Navbar />
      <div className="container mx-auto p-4 sm:p-6">
        <header className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
            <div>
              <h1 className="text-3xl font-bold tracking-tight mb-2">Contracts</h1>
              <p className="text-muted-foreground">
                Manage and track all your contracts in one place
              </p>
            </div>
            <ContractForm 
              onSave={handleSaveContract}
              trigger={
                <Button className="gap-1">
                  <PlusCircle size={16} />
                  <span>New Contract</span>
                </Button>
              }
            />
          </div>
          
          <FilterBar 
            onFilterChange={handleFilterChange}
            className="glass p-4 rounded-lg"
          />
        </header>
        
        {filteredContracts.length > 0 ? (
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {filteredContracts.map(contract => (
              <ContractCard 
                key={contract.id} 
                contract={contract} 
                className="animate-slide-in" 
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12 border rounded-lg bg-secondary/30">
            <h3 className="font-medium text-lg mb-2">No contracts found</h3>
            <p className="text-muted-foreground mb-6">
              There are no contracts matching your current filters.
            </p>
            <Button 
              variant="outline" 
              onClick={() => setFilters({ search: '', status: 'all', type: 'all', project: '' })}
            >
              Reset Filters
            </Button>
          </div>
        )}
      </div>
    </PageTransition>
  );
};

export default Contracts;
